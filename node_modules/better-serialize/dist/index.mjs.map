{"version":3,"sources":["../src/lib/private/isObject.ts","../src/lib/Serialize.ts","../src/lib/parse.ts","../src/lib/stringify.ts"],"sourcesContent":["export function isObject<Value = unknown>(value: unknown): value is Record<PropertyKey, Value> {\n  return typeof value === 'object' && value?.constructor === Object;\n}\n","import { isObject } from './private';\n\n/**\n * The namespace which contains everything for the transformation of raw Node.js data types.\n * @since 1.0.0\n */\nexport namespace Serialize {\n  /**\n   * Converts raw Node.js data types into a JSON-compatible format.\n   * @since 1.0.0\n   * @param data The raw Node.js data type to convert.\n   * @returns The JSON-compatible format of the raw Node.js data type.\n   */\n  export function toJsonCompatible(data: unknown): JsonCompatible {\n    if (isObject(data)) return { [Keying.Type]: Type.Object, [Keying.Value]: toJsonCompatibleObject(data) };\n    else if (typeof data === 'string') return { [Keying.Type]: Type.String, [Keying.Value]: data };\n    else if (typeof data === 'number') {\n      if (Number.isNaN(data)) return { [Keying.Type]: Type.Number, [Keying.Value]: 'NaN' };\n      if ([Infinity, -Infinity].includes(data)) return { [Keying.Type]: Type.Number, [Keying.Value]: String(data) };\n\n      return { [Keying.Type]: Type.Number, [Keying.Value]: data };\n    } else if (typeof data === 'boolean') return { [Keying.Type]: Type.Boolean, [Keying.Value]: data };\n    else if (Array.isArray(data)) return { [Keying.Type]: Type.Array, [Keying.Value]: toJsonCompatibleArray(data) };\n    else if (data === null) return { [Keying.Type]: Type.Null };\n    else if (data instanceof Date) return { [Keying.Type]: Type.Date, [Keying.Value]: data.toJSON() };\n    else if (data === undefined) return { [Keying.Type]: Type.Undefined };\n    else if (typeof data === 'bigint') return { [Keying.Type]: Type.BigInt, [Keying.Value]: data.toString() };\n    else if (data instanceof RegExp) {\n      return { [Keying.Type]: Type.RegExp, [Keying.Value]: { [Keying.Source]: data.source, [Keying.Flags]: data.flags } };\n    } else if (data instanceof Map) return { [Keying.Type]: Type.Map, [Keying.Value]: toJsonCompatibleEntries(Array.from(data)) };\n    else if (data instanceof Set) return { [Keying.Type]: Type.Set, [Keying.Value]: toJsonCompatibleArray(Array.from(data)) };\n\n    throw new TypeError(`Serialize received an unknown type while formatting: \"${data.constructor.name}\".`);\n  }\n\n  function toJsonCompatibleArray(array: unknown[]): JsonCompatible[] {\n    const json: JsonCompatible[] = [];\n\n    for (const value of array) json.push(toJsonCompatible(value));\n\n    return json;\n  }\n\n  function toJsonCompatibleEntries(entries: [PropertyKey, unknown][]): [PropertyKey, JsonCompatible][] {\n    const json: [PropertyKey, JsonCompatible][] = [];\n\n    for (const [key, value] of entries) json.push([key, toJsonCompatible(value)]);\n    return json;\n  }\n\n  function toJsonCompatibleObject(object: Record<PropertyKey, unknown>): Record<PropertyKey, JsonCompatible> {\n    const json: Record<PropertyKey, JsonCompatible> = {};\n\n    for (const key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\n        json[key] = toJsonCompatible(object[key]);\n      }\n    }\n\n    return json;\n  }\n\n  /**\n   * Converts JSON-compatible data into a raw Node.js data format.\n   * @since 1.0.0\n   * @param json The JSON-compatible data to convert.\n   * @returns The raw Node.js data format of the JSON-compatible data.\n   */\n  export function fromJsonCompatible(json: JsonCompatible): unknown {\n    const { [Keying.Type]: type, [Keying.Value]: value } = json;\n\n    switch (type) {\n      case Type.Array:\n        return fromJsonCompatibleArray(value as JsonCompatible[]);\n\n      case Type.BigInt:\n        return BigInt(value as string);\n\n      case Type.Boolean:\n        return value;\n\n      case Type.Date:\n        return new Date(value as string);\n\n      case Type.Map:\n        return new Map(fromJsonCompatibleMap(value as [PropertyKey, JsonCompatible][]));\n\n      case Type.Null:\n        return null;\n\n      case Type.Number:\n        if (typeof value === 'string') return Number(value);\n\n        return value;\n\n      case Type.Object:\n        return fromJsonCompatibleObject(value as Record<PropertyKey, JsonCompatible>);\n\n      case Type.RegExp:\n        return new RegExp((value as Regex)[Keying.Source], (value as Regex)[Keying.Flags]);\n\n      case Type.Set:\n        return new Set(fromJsonCompatibleArray(value as JsonCompatible[]));\n\n      case Type.String:\n        return value;\n\n      case Type.Undefined:\n        return undefined;\n\n      default:\n        throw new TypeError('Serialize received an unknown type.');\n    }\n  }\n\n  function fromJsonCompatibleArray(json: JsonCompatible[]): unknown[] {\n    const arr: unknown[] = [];\n\n    for (const value of json) arr.push(fromJsonCompatible(value));\n    return arr;\n  }\n\n  function fromJsonCompatibleMap(json: [PropertyKey, JsonCompatible][]): [PropertyKey, unknown][] {\n    const arr: [PropertyKey, unknown][] = [];\n\n    for (const [key, value] of json) arr.push([key, fromJsonCompatible(value)]);\n    return arr;\n  }\n\n  function fromJsonCompatibleObject(json: Record<PropertyKey, JsonCompatible>): Record<PropertyKey, unknown> {\n    const obj: Record<PropertyKey, unknown> = {};\n\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        obj[key] = fromJsonCompatible(json[key]);\n      }\n    }\n\n    return obj;\n  }\n\n  /**\n   * The keying used for JSON-compatible data.\n   * @since 1.0.0\n   */\n  export enum Keying {\n    Type = 't',\n\n    Value = 'v',\n\n    Source = 's',\n\n    Flags = 'f'\n  }\n\n  /**\n   * The types of JSON-compatible data.\n   * @since 1.0.0\n   */\n  export enum Type {\n    Array = 4,\n\n    BigInt = 8,\n\n    Boolean = 3,\n\n    Date = 6,\n\n    Map = 10,\n\n    Null = 5,\n\n    Number = 2,\n\n    Object = 0,\n\n    RegExp = 9,\n\n    Set = 11,\n\n    String = 1,\n\n    Undefined = 7\n  }\n\n  /**\n   * The JSON-compatible data format.\n   * @since 1.0.0\n   */\n  export interface JsonCompatible {\n    [Keying.Type]: Type;\n\n    [Keying.Value]?:\n      | string\n      | number\n      | boolean\n      | null\n      | JsonCompatible[]\n      | [PropertyKey, JsonCompatible][]\n      | Record<PropertyKey, JsonCompatible>\n      | Regex;\n  }\n\n  /**\n   * The JSON-compatible RegExp format.\n   * @since 1.0.0\n   */\n  export interface Regex {\n    [Keying.Source]: string;\n\n    [Keying.Flags]: string;\n  }\n}\n","import { Serialize } from './Serialize';\n\n/**\n * Parses a {@link Serialize.JsonCompatible} string into it's raw Node.js data format.\n * @since 1.0.0\n * @param data The {@link Serialize.JsonCompatible} string to parse.\n * @returns The raw Node.js data format of the {@link Serialize.JsonCompatible} string.\n */\nexport function parse(data: string): unknown {\n  return Serialize.fromJsonCompatible(JSON.parse(data));\n}\n","import { Serialize } from './Serialize';\n\n/**\n * Stringifies a Node.js data format into a {@link Serialize.JsonCompatible} string.\n * @since 1.0.0\n * @param data The Node.js data format to stringify.\n * @returns The {@link Serialize.JsonCompatible} string of the Node.js data format.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(Serialize.toJsonCompatible(data));\n}\n"],"mappings":"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","names":["Serialize","Keying","Type"]}